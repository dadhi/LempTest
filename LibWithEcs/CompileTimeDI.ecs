compileTimeAndRuntime 
{
    using System;
    using System.Collections.Generic;
    using System.Linq.Expressions;
    namespace LibWithEcs
    {
        public class A {} // todo: @test just for test here, move to another assembly 

        public interface IResolver 
        {
            object Resolve(Type serviceType);
        }

        public partial class CompileTimeDI : IResolver
        {
            public Dictionary<Type, Expression<Func<IResolver, object>>> Factories;

            public this() 
            {
                Factories = new Dictionary<Type, Expression<Func<IResolver, object>>>();
            }

            public void Register<T>(Expression<Func<IResolver, object>> factory)
            {
                Factories.Add(typeof(T), factory);
            }

            public object Resolve(Type serviceType) => null;
        }
    }
}

includeFile("ServiceRegistrations.ecs.include");
compileTime 
{
    using System.Linq;

    var factories = ServiceRegistrations.CreateAndConfigure().Factories;
    var getMethods = factories.Select(f => quote {
        object $(LNode.Id("Get_" + f.Key.Name))() => 
            $(LNode.Literal(f.Value.Body.ToString()));
    });
}

namespace LibWithEcs
{
    partial class CompileTimeDI
    {
        precompute(getMethods);
    }
}