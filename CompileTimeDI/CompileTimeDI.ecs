compileTimeAndRuntime 
{
    // <auto-generated />
    //
    // The code is auto-generated from the *.ecs file
    // If you change something here it will be lost on the next generate
    //
    #rawText(@"//---------------------------------------------------------");

    using System (.Collections (.Generic, .Concurrent), .Linq.Expressions,);
    namespace CompileTimeDI;

    public interface IResolver 
    {
        object Resolve(Type serviceType);
        TService Resolve<TService>();
    }


    public partial class DI : IResolver
    {
        replace (T => ConcurrentDictionary<Type, Expression<Func<IResolver, object>>>) { public T Registrations = new T(); }
        replace (T => ConcurrentDictionary<Type, Func<IResolver, object>>)             { internal T DelegateCache = new T(); }

        public void Register<T>(Expression<Func<IResolver, object>> factory)
        {
            Registrations.TryAdd(typeof(T), factory);
        }

        public class Exception : InvalidOperationException
        { 
            public this(string m) : base(m) {} 
        }

        partial void TryResolveGenerated(Type serviceType, ref object service, ref bool isGenerated);

        public object Resolve(Type serviceType) 
        {
            var isGenerated = false;
            object service = null;
            TryResolveGenerated(serviceType, ref service, ref isGenerated);
            if (isGenerated) 
                return service;

            if (DelegateCache.TryGetValue(serviceType, out var facDel)) 
                return facDel(this);

            if (Registrations.TryGetValue(serviceType, out var facExpr))
                return DelegateCache.GetOrAdd(serviceType, _ => facExpr.Compile()).Invoke(this);

            throw new Exception($"Unable to resolve `${serviceType}`");
        }

        public TService Resolve<TService>() => (TService)Resolve(typeof(TService));
    }
}

includeFile("ServiceRegistrations.ecs.include");
compileTime
{
    #ecs;

    using System (.Linq, .Text, );
    using Loyc (.Syntax, .Ecs, );

    var registrations = ConfigureDI().Registrations;

    var getMethods = registrations
        .Select((r, i) => quote {
            object $(LNode.Id(GetMethodName(r.Key, i)))(IResolver r) => 
                $(Parse(ExpressionToCSharp(r.Value.Body)));
        })
        .ToList();

    var usings = registrations.Keys
        .Select(x => x.Namespace).Where(n => !string.IsNullOrEmpty(n)).Distinct()
        .Select(n => quote { 
            using $(Parse(n)); 
        })
        .ToList();

    string GetMethodName(Type t, int i) => "Get_" + t.Name + "_" + i;

    define operator<<($s, $x) => $s.Append($x);

    // define operator>>($s, ($items, $itemStr))
    // {
    //     for (var i = 0; i < $items.Count; ++i)
    //         (i == 0 ? $s : $s << ", ") << $itemStr(its[i]);
    //     $s;
    // }

    StringBuilder AppendCsv<T>(StringBuilder s, IList<T> args, Func<T, string> getStr)
    {
        for (var i = 0; i < args.Count; ++i)
            (i == 0 ? s : s << ", ") << getStr(args[i]);
        return s;
    }

    // primitive implementation for demonstration purposes
    string ExpressionToCSharp(Expression e) 
    {
        if (e is NewExpression n)
        {
            var s = new StringBuilder();
            s << "new " << TypeToCSharp(n.Type, true);
            // s << '(' >> (n.Arguments, ExpressionToCSharp) << ')';
            AppendCsv(s << '(', n.Arguments, ExpressionToCSharp) << ')';
            return s.ToString();
        }

        if (e is MethodCallExpression m)
        {
            var s = new StringBuilder();
            if (m.Object != null)
                s << ExpressionToCSharp(m.Object) << '.';

            s.Append(m.Method.Name);
            if (m.Method.IsGenericMethod)
                AppendCsv(s << '<', m.Method.GetGenericArguments(), t => TypeToCSharp(t, true)) << '>';

            AppendCsv(s << '(', m.Arguments, ExpressionToCSharp) << ')';
            return s.ToString();
        }

        return e.ToString();
    } 

    // `;` is required at the end
    LNode Parse(string expr) => 
        EcsLanguageService.Value.ParseSingle(expr + ';', inputType: ParsingMode.Expressions); 
        //EcsLanguageService.Parse(r.Value.Body.ToString() + ';'); // works too but requires spread `$(.. Parse(x))` because returns the node list

    public string TypeToCSharp(Type type, bool stripNamespace = false, Func<Type, string, string> printType = null) 
    {
        var isArray = type.IsArray;
        if (isArray) 
            type = type.GetElementType();

        var typeString = stripNamespace ? type.Name : type.FullName ?? type.Name;
        typeString = typeString.Replace('+', '.');

        if (!type.IsGenericType)
            return printType?.Invoke(type, typeString) ?? typeString;

        var s = new StringBuilder(typeString.Substring(0, typeString.IndexOf('`')));
        s.Append('<');

        var genericArgs = type.GetGenericArguments();
        if (type.IsGenericTypeDefinition)
            s.Append(',', genericArgs.Length - 1);
        else
            for (var i = 0; i < genericArgs.Length; i++)
                (i == 0 ? s : s.Append(", ")).Append(TypeToCSharp(genericArgs[i], stripNamespace, printType));

        s.Append('>');

        if (isArray)
            s.Append("[]");

        typeString = s.ToString();
        return printType?.Invoke(type, typeString) ?? typeString;
    }
}

namespace CompileTimeDI
{
    precompute(usings);

    partial class DI
    {
        partial void TryResolveGenerated(Type serviceType, ref object service, ref bool isGenerated) 
        {
            precompute(registrations.Select((r, i) => quote {
                if (serviceType == typeof($(LNode.Id(r.Key.Name))))
                {
                    service = $(LNode.Id(GetMethodName(r.Key, i)))(this);
                    isGenerated = true;
                    return;
                }
            }));
        }

        precompute(getMethods);
    }
}